// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 10.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace UnityHtmlGenerator
{
    using System;
    
    
    #line 1 "Y:\tntdoc\Tools\UnityTxtParser\UnityHTMLGenerator\Templates\PropertyTemplate.tt"
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "10.0.0.0")]
    public partial class PropertyTemplate : PropertyTemplateBase
    {
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
        public virtual string TransformText()
        {
            this.GenerationEnvironment = null;
            this.Write(@"
<!-- #BeginTemplate ""/Templates/manual-scriptref-page.dwt"" -->

<!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Transitional//EN"" ""http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"">

<html xmlns=""http://www.w3.org/1999/xhtml"">

<head>

 <!-- #TemplateBeginEditable name=""doctitle"" -->
   <title>Unity Script Reference &ndash; 


    ");
            
            #line 16 "Y:\tntdoc\Tools\UnityTxtParser\UnityHTMLGenerator\Templates\PropertyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(m_data.m_class));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 16 "Y:\tntdoc\Tools\UnityTxtParser\UnityHTMLGenerator\Templates\PropertyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(m_data.m_member));
            
            #line default
            #line hidden
            this.Write("\r\n\r\n\r\n   </title>\r\n <!-- #TemplateEndEditable -->\r\n\r\n<link rel=\"StyleSheet\"  href" +
                    "=\"docs.css\" type=\"text/css\" />\r\n\r\n<style>\r\n\r\n/* \r\nUnity standard fonts \r\n*/\r\nbod" +
                    "y{ font-family:Helvetica, Arial, sans-serif; font-size:.9em; }\r\n\r\n/*\r\nsimple for" +
                    "mat for code, using fixed width\r\nand a nice border\r\n*/\r\n\r\npre { font-family:\"Cou" +
                    "rier New\", Courier, monospace; font-size:.8em; }\r\npre { padding:10px; margin:10p" +
                    "x; border:1px #d8d8d8 solid; }\r\npre { -moz-border-radius:10px; -webkit-border-ra" +
                    "dius:10px; }\r\npre { background:#f8f8f8; }\r\n\r\n/*\r\naligns the selection dialog on " +
                    "the top right\r\n*/\r\n\r\n.selectLang { margin-right:10px; text-align:right; float:ri" +
                    "ght; }\r\n\r\n\r\n.cSelect,\r\n.cSelect ul,\r\n.cSelect li { font-size:12px; }\r\n\r\n/*.cSele" +
                    "ct { border:1px solid #d0d0d0; }\r\n.cSelect { background:#ddf; }*/\r\n\r\n/*\r\n.cSelec" +
                    "t { -moz-border-radius:10px; -webkit-border-radius:10px; }\r\n*/\r\n\r\n.cSelect { dis" +
                    "play:inline-block; position:relative; float:right; margin-right:20px;}\r\n.cSelect" +
                    " { padding-top:.4em; padding-bottom:.2em;}\r\n.cSelect-Selected,\r\n.cSelect-ArrowDo" +
                    "wn,\r\n.cSelect li { cursor:pointer; }\r\n\r\n.cSelect,\r\n.roundTop { -webkit-border-to" +
                    "p-left-radius:10px; -webkit-border-top-right-radius:10px; }\r\n.cSelect,\r\n.roundTo" +
                    "p { -moz-border-radius-topleft:10px; -moz-border-radius-topright:10px; }\r\n\r\n.rou" +
                    "ndBottom,\r\n.cSelect ul { -webkit-border-bottom-left-radius:10px; -webkit-border-" +
                    "bottom-right-radius:10px; }\r\n.roundBottom,\r\n.cSelect ul { -moz-border-radius-bot" +
                    "tomleft:10px; -moz-border-radius-bottomright:10px; }\r\n\r\n\r\n.cSelectWidth { width:" +
                    "10em; display:block;}\r\n\r\n.cSelect-wrapper { position:relative; }\r\n\r\n.cSelect ul " +
                    "{ background:#fff; padding:0px; margin:0px; display:inline-block; }\r\n.cSelect ul" +
                    " { z-index:10; position:absolute; top:1.3em; }\r\n.cSelect ul { padding-bottom:.5e" +
                    "m; padding-top:.5em; padding-left:0px; padding-right:0px; }\r\n\r\n/*.cSelect ul { b" +
                    "order:1px solid #d0d0d0; }*/\r\n\r\n\r\n.cSelect li { padding:.1em; margin:0px; text-a" +
                    "lign:right; list-style-type:none; }\r\n.cSelect li { padding-left:.7em; padding-ri" +
                    "ght:24px; }\r\n\r\n.cSelect-highlight { background:#f0f0f0; }\r\n\r\n.cSelect-Selected {" +
                    " margin-left:.5em; margin-right:.5em; text-align:right; float:right; width:75%}\r" +
                    "\n\r\n.cSelect-ArrowDown { width:18px; height:18px; display:inline-block; float:rig" +
                    "ht}\r\n.cSelect-ArrowDown { background:url(\'../Images/down-arrow.png\'); text-align" +
                    ":center; }\r\n.cSelect-ArrowDown { -moz-border-radius:9px; -webkit-border-radius:9" +
                    "px; }\r\n\r\n.monoCompatibility-roweven { background-color:#DCDDDF; }\r\n.monoCompatib" +
                    "ility-rowodd { background-color:#F3F3F4; }\r\n.monoCompatibility-cell { border:1px" +
                    " solid #ffffff;}\r\n\r\n\r\n</style>\r\n</head>\r\n\r\n<body>\r\n\r\n\r\n<div class=\"scriprefmain\"" +
                    ">\r\n\r\n  <span class=\"heading\">\r\n   <!-- #TemplateBeginEditable name=\"title\" -->\r\n" +
                    "   <h2>\r\n    <a href=\'");
            
            #line 114 "Y:\tntdoc\Tools\UnityTxtParser\UnityHTMLGenerator\Templates\PropertyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(m_data.m_class));
            
            #line default
            #line hidden
            this.Write(".html\' class=\'classlink\' title=\'Go to Color scripting documentation\'> ");
            
            #line 114 "Y:\tntdoc\Tools\UnityTxtParser\UnityHTMLGenerator\Templates\PropertyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(m_data.m_class));
            
            #line default
            #line hidden
            this.Write(" </a>.");
            
            #line 114 "Y:\tntdoc\Tools\UnityTxtParser\UnityHTMLGenerator\Templates\PropertyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(m_data.m_member));
            
            #line default
            #line hidden
            this.Write(@"
   </h2>
   <!-- #TemplateEndEditable --> 
  </span>


<!-- #TemplateBeginEditable name=""details"" -->
 <span class=""text""></span>
<!-- #TemplateEndEditable --> 

 <!-- #TemplateBeginEditable name=""manual-top-nav"" -->
 
 <!-- #TemplateEndEditable -->


<!-- #TemplateBeginEditable name=""body"" -->
<div class=""manual-entry"">
 <h3>
  <span class=""hl-keyword"">var</span> ");
            
            #line 132 "Y:\tntdoc\Tools\UnityTxtParser\UnityHTMLGenerator\Templates\PropertyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(m_data.m_member));
            
            #line default
            #line hidden
            this.Write(" : <span class=\"hl-datatype\">");
            
            #line 132 "Y:\tntdoc\Tools\UnityTxtParser\UnityHTMLGenerator\Templates\PropertyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(m_data.m_type));
            
            #line default
            #line hidden
            this.Write("</span>\r\n </h3>\r\n \r\n <h3 class=\"soft\">\r\n  Description\r\n </h3>\r\n\r\n <p class=\"detai" +
                    "ls\"> \r\n  ");
            
            #line 140 "Y:\tntdoc\Tools\UnityTxtParser\UnityHTMLGenerator\Templates\PropertyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(m_data.m_description));
            
            #line default
            #line hidden
            this.Write(@"
 </p>


 <p class=""details""> 
  <div class=""example"">
  
  <div style=""clear:both;"">

  <div class=""cSelect cSelectWidth roundBottom"">
  
  <div class=""cSelect-wrapper"">
  
  <div class=""cSelect-ArrowDown"">
  </div>

   <span class=""cSelect-Selected"">JavaScript</span>
    <ul class=""cSelectWidth"" style=""display:none;"">
     <li>JavaScript</li>
     <li>C#</li>
     <li>Boo</li>
    </ul>
  </div>

  </div>
 
  <div style=""clear:both;""></div>
  
  </div>


");
            
            #line 171 "Y:\tntdoc\Tools\UnityTxtParser\UnityHTMLGenerator\Templates\PropertyTemplate.tt"
 foreach(Example e in m_data.m_examples) { 
            
            #line default
            #line hidden
            this.Write("  \r\n  <pre class=\"code\" code_lang_name=\"JavaScript\">\r\n\r\n   <h4 class=\"soft\">\r\n   " +
                    "<!-- #currenly display the frist example -->\r\n   ");
            
            #line 177 "Y:\tntdoc\Tools\UnityTxtParser\UnityHTMLGenerator\Templates\PropertyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(e.m_expression));
            
            #line default
            #line hidden
            this.Write("\r\n   </h4>\r\n\r\n   <p class=\"details\">\r\n  </pre>\r\n  \r\n   ");
            
            #line 183 "Y:\tntdoc\Tools\UnityTxtParser\UnityHTMLGenerator\Templates\PropertyTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n</body>\r\n\r\n</html>\r\n\r\n<!-- #EndTemplate -->\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "10.0.0.0")]
    public class PropertyTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
    }
    #endregion
}
